{"version":3,"sources":["components/Cell.js","components/Board.js","components/LocalBoard.js","components/PageLocalGame.js","components/AiBoard.js","components/PageAiGame.js","components/PageHome.js","components/OnlineBoard.js","components/PageOnlineGame.js","App.js","serviceWorker.js","index.js","lib/Game.js","lib/minimax.js","lib/GameState.js","util/copy.js","lib/constants.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","height","width","ctx","refs","canvas","getContext","drawSquare","cell","drawCircle","drawCross","newProps","strokeRect","lineWidth","beginPath","moveTo","lineTo","stroke","arc","Math","PI","_this2","react_default","a","createElement","i","j","ref","React","Component","Board","state","onCellClick","bind","assertThisInitialized","onUpdateView","rows","board","map","row","cols","col","key","style","marginLeft","marginRight","Cell_Cell","textAlign","getMessage","className","LocalBoard","game","Game","getState","newState","doMove","_state","currentPlayer","setState","objectSpread","console","log","gameComplete","constants","GAME_ON","TIE","P1_WON","PageLocalGame","LocalBoard_LocalBoard","move","findBestMove","setTimeout","PageAiGame","AiBoard_LocalBoard","PageHome","OnlineBoard","socket","socketIOClient","whoami","emit","id","on","PageOnlineGame","showBoard","onChange","create","join","event","target","value","form","type","OnlineBoard_OnlineBoard","show","App","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","require","GameState","_home_yash_prjs_react_web_tttweb_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","player","_updateModel","isComplete","_checkComplete","moves","won","P2_WON","_getCoinsCountInDir","connect","maxMoves","r","c","dir","count","changeCol","changeRow","module","exports","copy","getEmptyCells","cells","push","minimax","depth","maxDepth","score","evaluate","toMaximize","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","newGame","currentScore","err","return","arguments","length","bestScore","bestMove","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","x","y","_generateBoard","o","output","v","Array","isArray"],"mappings":"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","file":"static/js/main.bbe06b06.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Cell extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onClick = props.onClick;\n        this.height = 100;\n        this.width = this.height;\n    }\n\n    componentDidMount() {\n        const canvas = this.refs.canvas\n        const ctx = canvas.getContext(\"2d\")\n        this.drawSquare(ctx)\n        switch(this.props.cell) {\n            case 0:break;\n            case 1:\n                this.drawCircle(ctx)\n                break;\n            case 2:\n                this.drawCross(ctx)\n                break;\n            default:break;\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        const canvas = this.refs.canvas\n        const ctx = canvas.getContext(\"2d\")\n        switch(newProps.cell) {\n            case 0:break;\n            case 1:\n                this.drawCircle(ctx)\n                break;\n            case 2:\n                this.drawCross(ctx)\n                break;\n            default:break;\n        }\n    }\n\n    drawSquare(ctx) {\n        ctx.strokeRect(0,0,this.height,this.width)\n    }\n\n    drawCross(ctx) {\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(this.width, this.height);\n        ctx.stroke();\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(this.width, 0);\n        ctx.lineTo(0, this.height);\n        ctx.stroke();\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        ctx.arc(this.height/2, this.height/2, this.height/3, 0, 2 * Math.PI);\n        ctx.stroke();\n    }\n\n    render() {\n        return(\n            <div onClick = {()=>{this.onClick(this.props.i, this.props.j)}}>\n                <canvas ref=\"canvas\" width={this.width} height={this.height} />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport Cell from './Cell';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default class Board extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {}\n        this.onCellClick = this.onCellClick.bind(this);\n        this.onUpdateView = this.onUpdateView.bind(this);\n    }\n\n    onCellClick(i,j) {}\n    onUpdateView(state) {}\n    getMessage() {}\n\n    render() {\n        let rows = this.state.board == null?[]: this.state.board.map((row, i)=>{\n            let cols = row.map((col, j)=>\n                <div key={j} style = {{marginLeft:\"5px\", marginRight:\"5px\"}}>\n                        <Cell cell = {col} i = {i} j = {j} onClick = {this.onCellClick}></Cell>\n                </div>\n            )\n            return (\n                <div key={i}>\n                    {cols}\n                </div>\n            )\n        })\n        \n        return (\n            <div>\n                <h3 style={{textAlign:\"center\"}}>Tic Tac Toe</h3>\n                <h3 style={{textAlign:\"center\"}}>{this.getMessage()}</h3>\n                <div className=\"row\">   \n                    <div className=\"col-md-5 col-sm-5\"></div>\n                    {rows}\n                </div>\n            </div>);\n    }\n}\n\n/*\nimport React from 'react';\nimport Cell from './Cell';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport socketIOClient from \"socket.io-client\";\n\nconst constants = {\n    P1_WON : 1,\n    P2_WON : 2,\n    TIE : 3,\n    GAME_ON : 0\n}\n\nexport default class Board extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onCellClick = this.onCellClick.bind(this);\n        this.socket = socketIOClient('http://localhost:4300');\n        this.socket.on(\"connect\", ()=>{\n            console.log(\"connected\")\n            this.socket.emit(\"test\")\n        })\n        this.socket.on('updateView',(state)=>{\n            this.setState({...state}, () => {\n                if(this.state.currentPlayer === 2) {\n                    const move = findBestMove(this.state);\n                    this.socket.emit('move', {i:move[0],j:move[1], player: this.state.currentPlayer})\n                }\n            })\n        })\n    }\n\n    onCellClick(i,j) {\n        if(this.state.currentPlayer === 2)\n            return;\n        this.socket.emit('move', {i,j, player: this.state.currentPlayer})\n    }\n\n    render() {\n        let rows = this.state == null?[]: this.state.board.map((row, i)=>{\n            let cols = row.map((col, j)=>\n                <div key={j} style = {{marginLeft:\"5px\", marginRight:\"5px\"}}>\n                        <Cell cell = {col} i = {i} j = {j} onClick = {this.onCellClick}></Cell>\n                </div>\n            )\n            return (\n                <div key={i}>\n                    {cols}\n                </div>\n            )\n        })\n        let message;\n        if(this.state == null) {\n            message = \"loading\"\n        } else if(this.state.gameComplete === constants.GAME_ON) {\n            message = this.state.currentPlayer === 1?\"Player 'O's turn\": \"Playe 'X's turn\"\n        } else if(this.state.gameComplete === constants.TIE) {\n            message = \"Its a Tie\"\n            this.socket.disconnect();\n        } else {\n            message = \"Player \" + this.state.gameComplete === 1? \"O\":\"X\" + \" won\"\n            this.socket.disconnect();\n        }\n        return (\n            <div>\n                <h3 style={{textAlign:\"center\"}}>Tic Tac Toe</h3>\n                <h3 style={{textAlign:\"center\"}}>{message}</h3>\n                <div className=\"row\">   \n                    <div className=\"col-md-5 col-sm-5\"></div>\n                    {rows}\n                </div>\n            </div>);\n    }\n}\n*/\n","import Board from './Board';\nimport Game from'../lib/Game';\nimport constants from '../lib/constants'\n\nexport default class LocalBoard extends Board {\n    constructor(props) {\n        super(props);\n        this.game = new Game();\n        this.state = this.game.getState();\n    }\n\n    onCellClick(i,j) {\n        const newState = this.game.doMove(i,j,this.game._state.currentPlayer);\n        this.onUpdateView(newState);\n    }\n\n    onUpdateView(state) {\n        this.setState({...state});\n    }\n\n    getMessage() {\n        let message;\n        console.log(this.state);\n        if(this.state == null) {\n            message = \"loading\"\n        } else if(this.state.gameComplete === constants.GAME_ON) {\n            message = this.state.currentPlayer === 1?\"Player 'O's turn\": \"Playe 'X's turn\"\n        } else if(this.state.gameComplete === constants.TIE) {\n            message = \"Its a Tie\"\n        } else {\n            message = \"Player \" + this.state.gameComplete === constants.P1_WON ? \"O\":\"X\" + \" won\"\n        }\n        return message;\n    }\n}","import React from 'react';\nimport LocalBoard from './LocalBoard';\n\nexport default class PageLocalGame extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <LocalBoard></LocalBoard>\n            </div>\n        )\n    }\n}","import Board from './Board';\nimport Game from'../lib/Game';\nimport constants from '../lib/constants'\nimport findBestMove from '../lib/minimax';\n\nexport default class LocalBoard extends Board {\n    constructor(props) {\n        super(props);\n        this.game = new Game();\n        this.state = this.game.getState();\n    }\n\n    onCellClick(i,j) {\n        if(this.state.currentPlayer === 2) \n            return;\n        const newState = this.game.doMove(i,j,this.game._state.currentPlayer);\n        this.onUpdateView(newState);\n    }\n\n    onUpdateView(state) {\n        this.setState({...state}, () => {\n            if(this.state.currentPlayer === 2) {\n                const move = findBestMove(this.state);\n                const newState = this.game.doMove(move[0],move[1],this.state.currentPlayer);\n                setTimeout(() => {this.onUpdateView(newState);}, 100);\n            }\n        });\n    }\n\n    getMessage() {\n        let message;\n        console.log(this.state);\n        if(this.state == null) {\n            message = \"loading\"\n        } else if(this.state.gameComplete === constants.GAME_ON) {\n            message = this.state.currentPlayer === 1?\"Player 'O's turn\": \"Playe 'X's turn\"\n        } else if(this.state.gameComplete === constants.TIE) {\n            message = \"Its a Tie\"\n        } else {\n            message = \"Player \" + this.state.gameComplete === constants.P1_WON ? \"O\":\"X\" + \" won\"\n        }\n        return message;\n    }\n}","import React from 'react';\nimport AiBoard from './AiBoard';\n\nexport default class PageAiGame extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <AiBoard></AiBoard>\n            </div>\n        )\n    }\n}","import React from 'react';\nexport default class PageHome extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                home page\n            </div>\n        )\n    }\n}","import Board from './Board';\nimport constants from '../lib/constants'\nimport socketIOClient from \"socket.io-client\";\n\nexport default class OnlineBoard extends Board {\n    constructor(props) {\n        super(props);\n        this.socket = socketIOClient('http://localhost:4300');\n        if(this.props.whoami === 1) {\n            this.socket.emit('create', this.props.id);\n        } else {\n            this.socket.emit('join', this.props.id);\n        }\n        this.socket.on('updateView', this.onUpdateView)\n    }\n\n    onCellClick(i,j) {\n        if(this.props.whoami === this.state.currentPlayer) {\n            this.socket.emit('move', {i,j});\n        }\n    }\n\n    onUpdateView(state) {\n        this.setState({...state});\n    }\n\n    getMessage() {\n        let message;\n        if(this.state.board == null) {\n            message = \"loading\"\n        } else if(this.state.gameComplete === constants.GAME_ON) {\n            message = this.state.currentPlayer === 1?\"Player 'O's turn\": \"Playe 'X's turn\"\n        } else if(this.state.gameComplete === constants.TIE) {\n            message = \"Its a Tie\"\n        } else {\n            message = \"Player \" + (this.state.gameComplete == constants.P1_WON ? \"O\":\"X\") + \" won\"\n        }\n        return message;\n    }\n}","import React from 'react';\nimport OnlineBoard from './OnlineBoard';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default class PageOnlineGame extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showBoard : false,\n            whoami : null,\n            id : ''\n        };\n        this.onChange = this.onChange.bind(this);\n        this.create = this.create.bind(this);\n        this.join = this.join.bind(this);\n    }\n\n    onChange(event) {\n        this.setState({id : event.target.value})\n    }\n\n    create() {\n        this.setState({whoami:1, showBoard: true})\n    }\n\n    join() {\n        this.setState({whoami:2, showBoard: true})\n    }\n\n    render() {\n        const form = (\n            <div>\n                <input type = \"number\" onChange = {this.onChange}></input>\n                <button onClick = {this.create}>create</button>\n                <button onClick = {this.join}>join</button>\n            </div>\n        );\n        \n        const board = <OnlineBoard whoami = {this.state.whoami} id = {this.state.id} show = {this.state.showBoard}></OnlineBoard>\n\n        return (\n            <div>\n                {this.state.showBoard? board:form}\n            </div>\n        )\n    }\n}   ","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\nimport PageLocalGame from './components/PageLocalGame';\nimport PageAiGame from './components/PageAiGame';\nimport PageHome from './components/PageHome';\nimport PageOnlineGame from './components/PageOnlineGame';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n          <Route exact path = \"/\" component = {PageHome}></Route>\n          <Route path = \"/local/\" component = {PageLocalGame}></Route>\n          <Route path = \"/ai/\" component = {PageAiGame}></Route>\n          <Route path = \"/online/\" component = {PageOnlineGame}></Route>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const constants = require('./constants')\nconst GameState = require('./GameState')\nexport default class Game {\n\n    constructor(state) {\n        if(state) {\n            this._state = state;\n        } else {\n            this._state = new GameState();   \n        }\n    }\n\n    getState() {\n        return this._state;\n    }\n    \n    doMove(i,j,player) {\n        if(this._state.gameComplete)       \n            return null;             \n        if(this._state.currentPlayer != player)    \n            return null;\n        if(this._state.board[i][j] != 0)\n            return null;\n        this._updateModel(i,j,player);\n        return this._state;\n    }\n    \n    _updateModel(i,j,player) {\n        this._state.board[i][j] = player;\n        var isComplete = this._checkComplete(i,j,player);\n        this._state.gameComplete = isComplete; \n        this._state.moves++;\n        this._state.currentPlayer = this._state.moves%2 + 1;\n    }\n    \n    _checkComplete(row,col,player) {\n        let connect  = 3;\n        const won = player === 1? constants.P1_WON:constants.P2_WON;\n        if(this._getCoinsCountInDir(row,col,1)+ this._getCoinsCountInDir(row,col,5)>= connect-1){\n            return won;\n        }  \n        else if(this._getCoinsCountInDir(row,col,2)+ this._getCoinsCountInDir(row,col,6)>= connect-1){\n            return won ;\n        }\n        else if(this._getCoinsCountInDir(row,col,3)+ this._getCoinsCountInDir(row,col,7)>= connect-1){\n            return won ;\n        }  \n        else if(this._getCoinsCountInDir(row,col,4)+ this._getCoinsCountInDir(row,col,8)>= connect-1){\n            return won ;\n        }  \n        else if(this._state.moves >= this._state.maxMoves-1){\n            return constants.TIE;\n        }\n        else\n        return constants.GAME_ON ;        \n    } \n    \n    _getCoinsCountInDir(r  , c  , dir )  {\n        let player  = this._state.board[r][c];\n        let count  = 0;\n        dir -= 1;\n        let dirRow = [-1,-1,-1,0,1,1,1,0];\n        let dirCol = [-1,0,1,1,1,0,-1,-1];\n        let changeCol  = dirCol[dir];\n        let changeRow  = dirRow[dir];\n\n        r += changeRow ;\n        c += changeCol ; \n\n        while(r>=0&&r<this._state.rows&&c>=0&&c<this._state.cols){\n        if(player == this._state.board[r][c]){\n                count++;\n                r += changeRow ;\n                c += changeCol ; \n            }\n            else{\n                break ;\n            }\n        }\n        return count;\n    }\n\n}\n\nmodule.exports = Game;\n\n\n","const copy = require('../util/copy')\nconst constants = require('./constants');\nconst Game = require('./Game')\n\nconst WIN_SCORE = 10;\nconst LOSE_SCORE = -10;\nconst TIE_SCORE = 0;\n\nconst getEmptyCells = (state) => {\n    const cells = [];\n    for(let i=0; i<state.rows;i++) {\n        for(let j=0; j<state.cols;j++) {\n            if(state.board[i][j] === 0)\n                cells.push([i,j])\n        }\n    }\n    return cells;\n}\n\nconst evaluate = (state, player) => {\n    let score = 0;\n    switch(state.gameComplete) {\n        case constants.P1_WON:\n            if(player === 1) {\n                score = WIN_SCORE\n            } else {\n                score = LOSE_SCORE\n            }\n            break;\n        case constants.P2_WON:\n            if(player === 2) {\n                score = WIN_SCORE\n            } else {\n                score = LOSE_SCORE\n            }\n            break;\n        case constants.TIE:\n            score = TIE_SCORE;\n            break;\n        default:\n            score = TIE_SCORE;\n    }\n    return score;\n}\n\nconst minimax = (game, depth, player, maxDepth) => {\n\n    if(depth === maxDepth) {\n        return 0;\n    }\n    //console.log(\"player = \"+player)\n\tlet score = evaluate(game._state, player);\n    if(score === WIN_SCORE || score === LOSE_SCORE || game._state.gameComplete === constants.TIE) {\n        //console.log(depth)\n        return score;\n    }\n    const cells = getEmptyCells(game._state);\n    const toMaximize = game._state.currentPlayer == player;\n\n    if(toMaximize) {\n        score = -1000;\n    } else {\n        score = 1000;\n    }\n\n    for (const cell of cells) {\n\t\tconst x = cell[0];\n        const y = cell[1];\n        const newGame = new Game(copy(game._state));\n        newGame.doMove(cell[0], cell[1], newGame._state.currentPlayer);\n\t\tconst currentScore = minimax(newGame, depth+1, player, maxDepth);\n\n\t\tif (toMaximize) {\n\t\t\tif (currentScore > score)\n\t\t\t\tscore = currentScore;\n\t\t}\n\t\telse {\n\t\t\tif (currentScore < score)\n                score = currentScore;\n\t\t}\n\t}\n\treturn score;\n}\n\nconst findBestMove = (state, maxDepth = 100) => {\n    const cells = getEmptyCells(state);\n    let bestScore = -1000, bestMove = [-1, -1];\n    const player = state.currentPlayer\n    for (const cell of cells) {\n        const x = cell[0];\n        const y = cell[1];\n        const newGame = new Game(copy(state));\n        newGame.doMove(x, y, newGame._state.currentPlayer);\n        const score = minimax(newGame,0, player, maxDepth)   \n        if(score > bestScore) {\n            bestScore = score;\n            bestMove = cell;\n        } \n    }\n    return bestMove;\n}\n\nmodule.exports = findBestMove\n","const constants = require('./constants')\n\nclass GameState {\n    constructor() {\n        this.currentPlayer = 1;\n        this.moves = 0;\n        this.rows = 3;\n        this.cols = 3;\n        this.board = this._generateBoard();\n        this.maxMoves = this.rows * this.cols;\n        this.gameComplete = constants.GAME_ON;\n    }\n    \n    _generateBoard() {\n        var rows = [];\n        for(var row = 0; row < this.rows; row++) {\n            var c = [];\n            for(var col = 0; col < this.cols; col++) {\n                c.push(0);\n                //rows.push(0);\n            }\n            rows.push(c);\n        }\n        return rows;\n    }\n}\n\nmodule.exports = GameState;","module.exports = function copy(o) {\n    var output, v, key;\n    output = Array.isArray(o) ? [] : {};\n    for (key in o) {\n        v = o[key];\n        output[key] = (typeof v === \"object\") ? copy(v) : v;\n    }\n    return output;\n }","module.exports = {\n      P1_WON : 1,\n      P2_WON : 2,\n      TIE : 3,\n      GAME_ON : 0\n}"],"sourceRoot":""}